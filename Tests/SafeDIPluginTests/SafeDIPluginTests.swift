// Distributed under the MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import XCTest

@testable import SafeDIPlugin

final class SafeDIPluginTests: XCTestCase {

    // MARK: Code Generation Tests

    func test_run_successfullyGeneratesOutputFileWhenNoCodeInput() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree).trimmingCharacters(in: .newlines),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit
            """
        )
    }

    func test_run_doesNotWriteExtensionIfRootAlreadyHasEmptyInitializer() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalType: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
            ],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree).trimmingCharacters(in: .newlines),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsClass() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalType: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit

            extension RootViewController {
                @convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsActor() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalType: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
                """
                import UIKit

                @Instantiable
                public actor Root {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit

            extension Root {
                init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootIsStruct() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [
                """
                import Foundation

                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalType: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                    let urlSession: URLSession = .shared
                }
                """,
                """
                import UIKit

                @Instantiable
                public struct Root {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    @Instantiated
                    let networkService: NetworkService
                }
                """,
            ],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit

            extension Root {
                init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    self.init(networkService: networkService)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootHasMultipleLayers() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Inherited
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, networkService: NetworkService) {
                        self.user = user
                        self.networkService = networkService
                    }

                    @Forwarded
                    private let user: User

                    @Inherited
                    let networkService: NetworkService
                }
                """,
            ],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit

            extension RootViewController {
                @convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, LoggedInViewController> { user in
                        LoggedInViewController(user: user, networkService: networkService)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizedForwardedPropertyInSubBuilders() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Inherited
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    public init(user: User) {
                        self.user = user
                    }

                    @Inherited
                    let user: User
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, networkService: NetworkService, userService: UserService) {
                        self.user = user
                        self.networkService = networkService
                        self.userService = userService
                    }

                    @Forwarded
                    private let user: User

                    @Inherited
                    let networkService: NetworkService

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit

            extension RootViewController {
                @convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, LoggedInViewController> { user in
                        let userService = UserService(user: user)
                        return LoggedInViewController(user: user, networkService: networkService, userService: userService)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesThatUtilizePropertiesNotDirectlyProvidedByParent() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Inherited
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    public init(networkService: NetworkService, user: User) {
                        self.networkService = networkService
                        self.user = user
                    }

                    @Inherited
                    let user: User

                    @Inherited
                    private let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, userService: UserService) {
                        self.user = user
                        self.userService = userService
                    }

                    @Forwarded
                    private let user: User

                    @Instantiated
                    let userService: UserService
                }
                """,
            ],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit

            extension RootViewController {
                @convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, LoggedInViewController> { user in
                        let userService = UserService(networkService: networkService, user: user)
                        return LoggedInViewController(user: user, userService: userService)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    func test_run_writesConvenienceExtensionOnRootOfTree_whenRootInstantiatesPropertiesWithMultipleLayersOfInstantiators() async throws {
        let output = try await SafeDIPlugin.run(
            swiftFileContent: [
                """
                public struct User {}
                """,
                """
                public protocol AuthService {
                    func login(username: String, password: String) async -> User
                }

                @Instantiable(fulfillingAdditionalTypes: [AuthService.self])
                public final class DefaultAuthService: AuthService {
                    public init(networkService: NetworkService) {
                        self.networkService = networkService
                    }

                    public func login(username: String, password: String) async -> User {
                        User()
                    }

                    @Inherited
                    let networkService: NetworkService
                }
                """,
                """
                public protocol NetworkService {}

                @Instantiable(fulfillingAdditionalTypes: [NetworkService.self])
                public final class DefaultNetworkService: NetworkService {
                    public init() {}
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class RootViewController: UIViewController {
                    public init(authService: AuthService, networkService: NetworkService, loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>) {
                        self.authService = authService
                        self.networkService = networkService
                        self.loggedInViewControllerBuilder = loggedInViewControllerBuilder
                        derivedValue = false
                        super.init(nibName: nil, bundle: nil)
                    }

                    @Instantiated
                    let authService: AuthService

                    @Instantiated
                    let networkService: NetworkService

                    @Instantiated
                    let loggedInViewControllerBuilder: ForwardingInstantiator<User, LoggedInViewController>

                    private let derivedValue: Bool

                    func login(username: String, password: String) {
                        Task { @MainActor in
                            let user = await authService.login(username: username, password: password)
                            let loggedInViewController = loggedInViewControllerBuilder.instantiate(user)
                            pushViewController(loggedInViewController)
                        }
                    }
                }
                """,
                """
                @Instantiable
                public final class UserService {
                    public init(networkService: NetworkService, user: User) {
                        self.networkService = networkService
                        self.user = user
                    }

                    @Inherited
                    let user: User

                    @Inherited
                    private let networkService: NetworkService
                }
                """,
                """
                import UIKit

                @Instantiable
                public final class LoggedInViewController: UIViewController {

                    public init(user: User, userServiceInstantiator: Instantiator<UserService>) {
                        self.user = user
                        _userService = LazyInstantiated(userServiceInstantiator)
                    }

                    @Forwarded
                    private let user: User

                    @LazyInstantiated
                    let userService: UserService
                }
                """,
            ],
            instantiablesOutput: nil,
            dependentModuleNames: [],
            dependentInstantiables: [[]],
            buildDependencyTreeOutput: true
        )

        XCTAssertEqual(
            try XCTUnwrap(output.dependencyTree),
            """
            // This file was generated by the SafeDIGenerateDependencyTree build tool plugin.
            // Any modifications made to this file will be overwritten on subsequent builds.
            // Please refrain from editing this file directly.

            import SwiftUI
            import UIKit

            extension RootViewController {
                @convenience init() {
                    let networkService: NetworkService = DefaultNetworkService()
                    let authService: AuthService = DefaultAuthService(networkService: networkService)
                    let loggedInViewControllerBuilder = ForwardingInstantiator<User, LoggedInViewController> { user in
                        let userServiceInstantiator = Instantiator<UserService> {
                            UserService(networkService: networkService, user: user)
                        }
                        return LoggedInViewController(user: user, userServiceInstantiator: userServiceInstantiator)
                    }
                    self.init(authService: authService, networkService: networkService, loggedInViewControllerBuilder: loggedInViewControllerBuilder)
                }
            }
            """
        )
    }

    // showstopper TODO: multi-module test
    // showstopper TODO: same instantiated dependency in multiple trees (same name + type, instantiated in two separate trees)

    // MARK: Error Tests

    func test_run_onCodeWithUnfulfillableInstantiatedProperty_throwsError() async {
        await assertThrowsError(
            """
            No `@Instantiable`-decorated type found to fulfill `@Instantiated` or  `@LazyInstantiated`-decorated property with type `URLSession`
            """
        ) {
            try await SafeDIPlugin.run(
                swiftFileContent: [
                    """
                    import Foundation

                    public protocol NetworkService {}

                    @Instantiable(fulfillingAdditionalType: [NetworkService.self])
                    public final class DefaultNetworkService: NetworkService {
                        public init(urlSession: URLSession) {
                            self.urlSession = urlSession
                        }

                        @Instantiated
                        let urlSession: URLSession // URLSession is not `@Instantiable`! This will fail!
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService
                    }
                    """,
                ],
                instantiablesOutput: nil,
                dependentModuleNames: [],
                dependentInstantiables: [[]],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithUnfulfillableInheritedProperty_throwsError() async {
        await assertThrowsError(
            """
            The following inherited properties were never instantiated:
            `urlSession: URLSession` is not instantiated in chain: RootViewController -> DefaultNetworkService
            """
        ) {
            try await SafeDIPlugin.run(
                swiftFileContent: [
                    """
                    import Foundation

                    public protocol NetworkService {}

                    @Instantiable(fulfillingAdditionalType: [NetworkService.self])
                    public final class DefaultNetworkService: NetworkService {
                        public init(urlSession: URLSession) {
                            self.urlSession = urlSession
                        }

                        @Inherited
                        let urlSession: URLSession // URLSession is not `@Instantiable`! This will fail!
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService
                    }
                    """,
                ],
                instantiablesOutput: nil,
                dependentModuleNames: [],
                dependentInstantiables: [[]],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithNestedInstantiable_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable types must be top-level declarations. Found the following nested @Instantiable types: SplashViewController
            """
        ) {
            try await SafeDIPlugin.run(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}

                        @Instantiable
                        public final class SplashViewController: UIViewController {
                            public init() {}
                        }
                    }
                    """,
                ],
                instantiablesOutput: nil,
                dependentModuleNames: [],
                dependentInstantiables: [[]],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithMultipleNestedInstantiable_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable types must be top-level declarations. Found the following nested @Instantiable types: AuthenticatedViewController, SplashViewController
            """
        ) {
            try await SafeDIPlugin.run(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}

                        @Instantiable
                        public final class SplashViewController: UIViewController {
                            public init() {}
                        }

                        @Instantiable
                        public final class AuthenticatedViewController: UIViewController {
                            public init() {}
                        }
                    }
                    """,
                ],
                instantiablesOutput: nil,
                dependentModuleNames: [],
                dependentInstantiables: [[]],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithDuplicateInstantiable_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable-decorated types must have globally unique type names and fulfill globally unqiue types. Found multiple @Instantiable-decorated types fulfilling `RootViewController`
            """
        ) {
            try await SafeDIPlugin.run(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init() {}
                    }
                    """,
                ],
                instantiablesOutput: nil,
                dependentModuleNames: [],
                dependentInstantiables: [[]],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithDuplicateInstantiableFulfillment_throwsError() async {
        await assertThrowsError(
            """
            @Instantiable-decorated types must have globally unique type names and fulfill globally unqiue types. Found multiple @Instantiable-decorated types fulfilling `UIViewController`
            """
        ) {
            try await SafeDIPlugin.run(
                swiftFileContent: [
                    """
                    import UIKit

                    @Instantiable(fulfillingAdditionalType: [UIViewController.self])
                    public final class RootViewController: UIViewController {
                        public init() {}
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable(fulfillingAdditionalType: [UIViewController.self])
                    public final class SplashViewController: UIViewController {
                        public init() {}
                    }
                    """,
                ],
                instantiablesOutput: nil,
                dependentModuleNames: [],
                dependentInstantiables: [[]],
                buildDependencyTreeOutput: true
            )
        }
    }


    func test_run_onCodeWithCircularPropertyDependenciesInSameCombinedScope_throwsError() async {
        await assertThrowsError(
            """
            Dependency cycle detected!
            DefaultLoggingService -> DefaultNetworkService -> DefaultLoggingService
            """
        ) {
            try await SafeDIPlugin.run(
                swiftFileContent: [
                    """
                    import Foundation

                    public protocol NetworkService {}

                    @Instantiable(fulfillingAdditionalType: [NetworkService.self])
                    public final class DefaultNetworkService: NetworkService {
                        public init(loggingService: LoggingService) {
                            self.loggingService = loggingService
                        }

                        @Instantiated
                        let loggingService: LoggingService
                    }
                    """,
                    """
                    import Foundation

                    public protocol LoggingService {}

                    @Instantiable(fulfillingAdditionalType: [LoggingService.self])
                    public final class DefaultLoggingService: LoggingService {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(networkService: NetworkService) {
                            self.networkService = networkService
                        }

                        @Instantiated
                        let networkService: NetworkService
                    }
                    """,
                ],
                instantiablesOutput: nil,
                dependentModuleNames: [],
                dependentInstantiables: [[]],
                buildDependencyTreeOutput: true
            )
        }
    }

    func test_run_onCodeWithCircularPropertyDependenciesInDifferentCombinedScopes_throwsError() async {
        await assertThrowsError(
            """
            Dependency cycle detected!
            UserManager -> AuthenticatedViewController -> UserManager
            """
        ) {
            try await SafeDIPlugin.run(
                swiftFileContent: [
                    """
                    @Instantiable
                    public final class UserManager {
                        public init(authenticatedViewControllerBuilder: ForwardingInstantiator<User, AuthenticatedViewController>) {
                            self.authenticatedViewControllerBuilder = authenticatedViewControllerBuilder
                        }

                        @Instantiated
                        let authenticatedViewControllerBuilder: ForwardingInstantiator<User, AuthenticatedViewController>

                        var user: User
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class AuthenticatedViewController: UIViewController {
                        public init(userManager: UserManager) {
                            self.userManager = userManager
                        }

                        @Instantiated
                        let userManager: UserManager
                    }
                    """,
                    """
                    import UIKit

                    @Instantiable
                    public final class RootViewController: UIViewController {
                        public init(userManager: UserManager) {
                            self.userManager = userManager
                        }

                        @Instantiated
                        let userManager: UserManager
                    }
                    """,
                ],
                instantiablesOutput: nil,
                dependentModuleNames: [],
                dependentInstantiables: [[]],
                buildDependencyTreeOutput: true
            )
        }
    }

    private func assertThrowsError<ReturnType>(
        _ errorDescription: String,
        line: UInt = #line,
        block: () async throws -> ReturnType
    ) async {
        var didThrow = false
        do {
            _ = try await block()
        } catch {
            didThrow = true
            XCTAssertEqual((error as CustomStringConvertible).description, errorDescription, line: line)
        }
        XCTAssertTrue(didThrow, "Did not throw error!", line: line)
    }
}
